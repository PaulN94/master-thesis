{
    "variations": [
        {
            "id": "1.2.1.1.1",
            "question_variation": "What would happen if the maximum allowed weight is changed to 9?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 9\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "W = 9",
            "solver_output": "[0, 3]",
            "question_reformulation": "What would occur if the maximum permitted weight is altered to 9?"
        },
        {
            "id": "1.2.1.1.2",
            "question_variation": "What would happen if the maximum allowed weight is changed to 9?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 9\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "W = 9",
            "solver_output": "[0, 3]",
            "question_reformulation": "What would be the outcome if the maximum permissible weight is altered to 9?"
        },
        {
            "id": "1.2.1.1.3",
            "question_variation": "What would happen if the maximum allowed weight is changed to 9?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 9\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "W = 9",
            "solver_output": "[0, 3]",
            "question_reformulation": "What would be the consequences if the maximum weight permitted is altered to 9?"
        },
        {
            "id": "1.2.1.2.1",
            "question_variation": "What would happen if the maximum allowed weight is changed to 3?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 3\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "W = 3",
            "solver_output": "[3]",
            "question_reformulation": "What would be the outcome if the maximum permitted weight is altered to 3?"
        },
        {
            "id": "1.2.1.2.2",
            "question_variation": "What would happen if the maximum allowed weight is changed to 3?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 3\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "W = 3",
            "solver_output": "[3]",
            "question_reformulation": "What if the maximum permissible weight is altered to 3?"
        },
        {
            "id": "1.2.1.2.3",
            "question_variation": "What would happen if the maximum allowed weight is changed to 3?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 3\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "W = 3",
            "solver_output": "[3]",
            "question_reformulation": "What would be the consequence if the maximum weight limit is modified to 3?"
        },
        {
            "id": "1.2.1.3.1",
            "question_variation": "What would happen if the maximum allowed weight is changed to 8?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 8\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "W = 8",
            "solver_output": "[0, 3]",
            "question_reformulation": "What would occur if the maximum permissible weight is altered to 8?"
        },
        {
            "id": "1.2.1.3.2",
            "question_variation": "What would happen if the maximum allowed weight is changed to 8?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 8\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "W = 8",
            "solver_output": "[0, 3]",
            "question_reformulation": "What would occur if the maximum permissible weight is altered to 8?"
        },
        {
            "id": "1.2.1.3.3",
            "question_variation": "What would happen if the maximum allowed weight is changed to 8?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 8\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "W = 8",
            "solver_output": "[0, 3]",
            "question_reformulation": "What would be the outcome if the maximum permissible weight is altered to 8?"
        },
        {
            "id": "1.2.2.1.1",
            "question_variation": "What would be the effect on the optimal selection if the weight of the item with the index 2 was changed to 2?",
            "answer_variation": "from gurobipy import Model, GRB\n\n            \ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nweights[2] = 2\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "weights[2] = 2",
            "solver_output": "[0, 2, 3]",
            "question_reformulation": "How would the optimal selection be impacted if the weight of the item at index 2 was altered to 2?"
        },
        {
            "id": "1.2.2.1.2",
            "question_variation": "What would be the effect on the optimal selection if the weight of the item with the index 2 was changed to 2?",
            "answer_variation": "from gurobipy import Model, GRB\n\n            \ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nweights[2] = 2\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "weights[2] = 2",
            "solver_output": "[0, 2, 3]",
            "question_reformulation": "What would happen to the optimal choice if the weight of the item at index 2 was altered to 2?"
        },
        {
            "id": "1.2.2.1.3",
            "question_variation": "What would be the effect on the optimal selection if the weight of the item with the index 2 was changed to 2?",
            "answer_variation": "from gurobipy import Model, GRB\n\n            \ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nweights[2] = 2\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "weights[2] = 2",
            "solver_output": "[0, 2, 3]",
            "question_reformulation": "How would the optimal choice be impacted if the weight of the item at index 2 was altered to 2?"
        },
        {
            "id": "1.2.2.2.1",
            "question_variation": "What would be the effect on the optimal selection if the weight of the item with the index 0 was changed to 6?",
            "answer_variation": "from gurobipy import Model, GRB\n\n            \ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nweights[0] = 6\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "weights[0] = 6",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would altering the weight of the item at index 0 to 6 affect the optimal selection?"
        },
        {
            "id": "1.2.2.2.2",
            "question_variation": "What would be the effect on the optimal selection if the weight of the item with the index 0 was changed to 6?",
            "answer_variation": "from gurobipy import Model, GRB\n\n            \ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nweights[0] = 6\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "weights[0] = 6",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would altering the weight of the item at index 0 to 6 impact the optimal choice?"
        },
        {
            "id": "1.2.2.2.3",
            "question_variation": "What would be the effect on the optimal selection if the weight of the item with the index 0 was changed to 6?",
            "answer_variation": "from gurobipy import Model, GRB\n\n            \ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nweights[0] = 6\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "weights[0] = 6",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would the optimal choice be impacted if the weight of the item at index 0 was altered to 6?"
        },
        {
            "id": "1.2.2.3.1",
            "question_variation": "What would be the effect on the optimal selection if the weight of the item with the index 0 was changed to 2?",
            "answer_variation": "from gurobipy import Model, GRB\n\n            \ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nweights[0] = 2\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "weights[0] = 2",
            "solver_output": "[0, 1, 3]",
            "question_reformulation": "How would altering the weight of the item at index 0 to 2 impact the optimal selection?"
        },
        {
            "id": "1.2.2.3.2",
            "question_variation": "What would be the effect on the optimal selection if the weight of the item with the index 0 was changed to 2?",
            "answer_variation": "from gurobipy import Model, GRB\n\n            \ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nweights[0] = 2\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "weights[0] = 2",
            "solver_output": "[0, 1, 3]",
            "question_reformulation": "How would the optimal choice be affected if the weight of the item at index 0 was altered to 2?"
        },
        {
            "id": "1.2.2.3.3",
            "question_variation": "What would be the effect on the optimal selection if the weight of the item with the index 0 was changed to 2?",
            "answer_variation": "from gurobipy import Model, GRB\n\n            \ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nweights[0] = 2\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "weights[0] = 2",
            "solver_output": "[0, 1, 3]",
            "question_reformulation": "How would the optimal selection be affected if the weight of the item at index 0 was altered to 2?"
        },
        {
            "id": "1.2.3.1.1",
            "question_variation": "If the value of the item with the index 1 is updated to 24, how would the optimal selection be influenced?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nvalues[1] = 24\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "values[1] = 24",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would the optimal selection be affected if the item at index 1 is updated to a value of 24?"
        },
        {
            "id": "1.2.3.1.2",
            "question_variation": "If the value of the item with the index 1 is updated to 24, how would the optimal selection be influenced?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nvalues[1] = 24\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "values[1] = 24",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would the optimal selection be affected if the item at index 1 is changed to 24?"
        },
        {
            "id": "1.2.3.1.3",
            "question_variation": "If the value of the item with the index 1 is updated to 24, how would the optimal selection be influenced?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nvalues[1] = 24\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "values[1] = 24",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would the optimal selection be affected if the item at index 1 has its value updated to 24?"
        },
        {
            "id": "1.2.3.2.1",
            "question_variation": "If the value of the item with the index 1 is updated to 45, how would the optimal selection be influenced?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nvalues[1] = 45\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "values[1] = 45",
            "solver_output": "[1, 3]",
            "question_reformulation": "How would the optimal selection be affected if the item at index 1 is changed to a value of 45?"
        },
        {
            "id": "1.2.3.2.2",
            "question_variation": "If the value of the item with the index 1 is updated to 45, how would the optimal selection be influenced?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nvalues[1] = 45\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "values[1] = 45",
            "solver_output": "[1, 3]",
            "question_reformulation": "How would the optimal selection be affected if the item at index 1 is updated to a value of 45?"
        },
        {
            "id": "1.2.3.2.3",
            "question_variation": "If the value of the item with the index 1 is updated to 45, how would the optimal selection be influenced?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nvalues[1] = 45\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "values[1] = 45",
            "solver_output": "[1, 3]",
            "question_reformulation": "How would the optimal selection be affected if the item at index 1 is altered to 45?"
        },
        {
            "id": "1.2.3.3.1",
            "question_variation": "If the value of the item with the index 2 is updated to 19, how would the optimal selection be influenced?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nvalues[2] = 19\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "values[2] = 19",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would the optimal selection be affected if the item at index 2 has its value changed to 19?"
        },
        {
            "id": "1.2.3.3.2",
            "question_variation": "If the value of the item with the index 2 is updated to 19, how would the optimal selection be influenced?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nvalues[2] = 19\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "values[2] = 19",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would the optimal selection be affected if the item at index 2 is updated to a value of 19?"
        },
        {
            "id": "1.2.3.3.3",
            "question_variation": "If the value of the item with the index 2 is updated to 19, how would the optimal selection be influenced?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nvalues[2] = 19\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "values[2] = 19",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would the optimal selection be affected if the item at index 2 is changed to a value of 19?"
        },
        {
            "id": "1.2.4.1.1",
            "question_variation": "How would you modify the objective function of the given knapsack problem to incorporate an L1 regularization, aiming to reduce the number of selected items, by adding a penalty term of 7.02 for each selected item?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.02 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.02 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would you alter the goal function of the provided knapsack problem to include an L1 regularization, with the intention of decreasing the quantity of chosen items, by incorporating a penalty term of 7.02 for every chosen item?"
        },
        {
            "id": "1.2.4.1.2",
            "question_variation": "How would you modify the objective function of the given knapsack problem to incorporate an L1 regularization, aiming to reduce the number of selected items, by adding a penalty term of 7.02 for each selected item?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.02 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.02 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would you adjust the objective function of the provided knapsack problem to include an L1 regularization, with the intention of minimizing the quantity of chosen items, by appending a penalty rate of 7.02 for every item selected?"
        },
        {
            "id": "1.2.4.1.3",
            "question_variation": "How would you modify the objective function of the given knapsack problem to incorporate an L1 regularization, aiming to reduce the number of selected items, by adding a penalty term of 7.02 for each selected item?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.02 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.02 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would you revise the goal function of the provided knapsack problem to include an L1 regularization, with the intention of minimizing the number of chosen items, by incorporating a penalty term of 7.02 for each item chosen?"
        },
        {
            "id": "1.2.4.2.1",
            "question_variation": "How would you modify the objective function of the given knapsack problem to incorporate an L1 regularization, aiming to reduce the number of selected items, by adding a penalty term of 5.88 for each selected item?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 5.88 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 5.88 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How can you alter the objective function of the specified knapsack problem to include an L1 regularization with the goal of diminishing the quantity of chosen items, by incorporating a penalty term of 5.88 for every item selected?"
        },
        {
            "id": "1.2.4.2.2",
            "question_variation": "How would you modify the objective function of the given knapsack problem to incorporate an L1 regularization, aiming to reduce the number of selected items, by adding a penalty term of 5.88 for each selected item?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 5.88 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 5.88 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How can you adjust the goal function of the specified knapsack problem to include an L1 regularization, with the aim of diminishing the count of chosen items, by appending a punishment term of 5.88 for each item chosen?"
        },
        {
            "id": "1.2.4.2.3",
            "question_variation": "How would you modify the objective function of the given knapsack problem to incorporate an L1 regularization, aiming to reduce the number of selected items, by adding a penalty term of 5.88 for each selected item?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 5.88 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 5.88 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would you alter the objective function of the presented knapsack problem to include an L1 regularization, with the intention of minimizing the count of chosen items, by appending a penalty term of 5.88 for every item selected?"
        },
        {
            "id": "1.2.4.3.1",
            "question_variation": "How would you modify the objective function of the given knapsack problem to incorporate an L1 regularization, aiming to reduce the number of selected items, by adding a penalty term of 9.97 for each selected item?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 9.97 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 9.97 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How can you adjust the objective function of the specified knapsack problem to include an L1 regularization, with the goal of minimizing the quantity of chosen items, by appending a penalty value of 9.97 for each item selected?"
        },
        {
            "id": "1.2.4.3.2",
            "question_variation": "How would you modify the objective function of the given knapsack problem to incorporate an L1 regularization, aiming to reduce the number of selected items, by adding a penalty term of 9.97 for each selected item?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 9.97 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 9.97 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would you adjust the objective function of the identified knapsack problem to include an L1 regularization, with the goal of reducing the quantity of chosen items, by incorporating a penalty term of 9.97 for every item selected?"
        },
        {
            "id": "1.2.4.3.3",
            "question_variation": "How would you modify the objective function of the given knapsack problem to incorporate an L1 regularization, aiming to reduce the number of selected items, by adding a penalty term of 9.97 for each selected item?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 9.97 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 9.97 * sum(x[i] for i in range(n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How can you adjust the objective function of the specified knapsack problem to include an L1 regularization, with the goal of decreasing the amount of chosen items, by incorporating a penalty term of 9.97 for every item selected?"
        },
        {
            "id": "1.2.5.1.1",
            "question_variation": "Imagine there's a synergy between the items with the idices 3 and 1 such that if both are selected, an additional value of 4.92 is added to the objective. How can you model this effect in the objective function?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) + 4.92 * x[3] * x[1], GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) + 4.92 * x[3] * x[1], GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How can you incorporate into the objective function a scenario where selecting both items with indices 3 and 1 results in an additional value of 4.92 due to their synergistic interaction?"
        },
        {
            "id": "1.2.5.1.2",
            "question_variation": "Imagine there's a synergy between the items with the idices 3 and 1 such that if both are selected, an additional value of 4.92 is added to the objective. How can you model this effect in the objective function?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) + 4.92 * x[3] * x[1], GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) + 4.92 * x[3] * x[1], GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How can you incorporate into the objective function the effect that choosing both items with indices 3 and 1 results in an additional value of 4.92 due to their synergy?"
        },
        {
            "id": "1.2.5.1.3",
            "question_variation": "Imagine there's a synergy between the items with the idices 3 and 1 such that if both are selected, an additional value of 4.92 is added to the objective. How can you model this effect in the objective function?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) + 4.92 * x[3] * x[1], GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) + 4.92 * x[3] * x[1], GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "Visualize a cooperative effect between elements with indices 3 and 1. If both are chosen, an extra value of 4.92 is included in the objective. How could you represent this influence in the objective function?"
        },
        {
            "id": "1.2.5.2.1",
            "question_variation": "Imagine there's a synergy between the items with the idices 2 and 3 such that if both are selected, an additional value of 5.83 is added to the objective. How can you model this effect in the objective function?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) + 5.83 * x[2] * x[3], GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) + 5.83 * x[2] * x[3], GRB.MAXIMIZE)",
            "solver_output": "[2, 3]",
            "question_reformulation": "Consider that items indexed at 2 and 3 interact in such a way that choosing both will contribute an extra value of 5.83 to the objective. How would you represent this impact in the objective function?"
        },
        {
            "id": "1.2.5.2.2",
            "question_variation": "Imagine there's a synergy between the items with the idices 2 and 3 such that if both are selected, an additional value of 5.83 is added to the objective. How can you model this effect in the objective function?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) + 5.83 * x[2] * x[3], GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) + 5.83 * x[2] * x[3], GRB.MAXIMIZE)",
            "solver_output": "[2, 3]",
            "question_reformulation": "How can you incorporate into the objective function the phenomena where selecting both items with the index 2 and 3 yields an extra value of 5.83 due to their synergistic effect?"
        },
        {
            "id": "1.2.5.2.3",
            "question_variation": "Imagine there's a synergy between the items with the idices 2 and 3 such that if both are selected, an additional value of 5.83 is added to the objective. How can you model this effect in the objective function?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) + 5.83 * x[2] * x[3], GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) + 5.83 * x[2] * x[3], GRB.MAXIMIZE)",
            "solver_output": "[2, 3]",
            "question_reformulation": "How can you incorporate into the objective function a scenario where there's a collaborative effect between items with indices 2 and 3 that contributes an extra value of 5.83 when both are chosen?"
        },
        {
            "id": "1.2.5.3.1",
            "question_variation": "Imagine there's a synergy between the items with the idices 3 and 2 such that if both are selected, an additional value of 8.72 is added to the objective. How can you model this effect in the objective function?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) + 8.72 * x[3] * x[2], GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) + 8.72 * x[3] * x[2], GRB.MAXIMIZE)",
            "solver_output": "[2, 3]",
            "question_reformulation": "How can you incorporate into the objective function, the effect of an additional value of 8.72 that results from the combined selection of items with index 3 and 2?"
        },
        {
            "id": "1.2.5.3.2",
            "question_variation": "Imagine there's a synergy between the items with the idices 3 and 2 such that if both are selected, an additional value of 8.72 is added to the objective. How can you model this effect in the objective function?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) + 8.72 * x[3] * x[2], GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) + 8.72 * x[3] * x[2], GRB.MAXIMIZE)",
            "solver_output": "[2, 3]",
            "question_reformulation": "How can you incorporate into the objective function a scenario where selecting both items with indices 3 and 2 yields an additional value of 8.72, due to their synergistic interaction?"
        },
        {
            "id": "1.2.5.3.3",
            "question_variation": "Imagine there's a synergy between the items with the idices 3 and 2 such that if both are selected, an additional value of 8.72 is added to the objective. How can you model this effect in the objective function?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) + 8.72 * x[3] * x[2], GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) + 8.72 * x[3] * x[2], GRB.MAXIMIZE)",
            "solver_output": "[2, 3]",
            "question_reformulation": "Consider a scenario where items indexed 3 and 2 have a synergistic effect that results in an extra value of 8.72 to the objective when both are chosen. How would you represent this impact in the objective function?"
        },
        {
            "id": "1.2.6.1.1",
            "question_variation": "Imagine a scenario where a penalty of 7.59 units is applied for each additional item after the item with the index 1. How would you modify the objective function to account for this?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.59 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.59 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would you adjust the objective function to accommodate a situation where an extra charge of 7.59 units is imposed for each item beyond the one with the index 1?"
        },
        {
            "id": "1.2.6.1.2",
            "question_variation": "Imagine a scenario where a penalty of 7.59 units is applied for each additional item after the item with the index 1. How would you modify the objective function to account for this?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.59 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.59 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would you adjust the objective function to accommodate a situation where a 7.59 unit penalty is imposed for each item beyond the one with the index 1?"
        },
        {
            "id": "1.2.6.1.3",
            "question_variation": "Imagine a scenario where a penalty of 7.59 units is applied for each additional item after the item with the index 1. How would you modify the objective function to account for this?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.59 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.59 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "Visualize a situation where an added charge of 7.59 units is imposed for every item beyond the one with the index 1. How would you adjust the objective function to incorporate this?"
        },
        {
            "id": "1.2.6.2.1",
            "question_variation": "Imagine a scenario where a penalty of 14.75 units is applied for each additional item after the item with the index 1. How would you modify the objective function to account for this?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 14.75 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 14.75 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)",
            "solver_output": "[0]",
            "question_reformulation": "Consider a situation where there is a fine of 14.75 units for each item beyond the one at index 1. How would you alter the objective function to incorporate this?"
        },
        {
            "id": "1.2.6.2.2",
            "question_variation": "Imagine a scenario where a penalty of 14.75 units is applied for each additional item after the item with the index 1. How would you modify the objective function to account for this?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 14.75 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 14.75 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)",
            "solver_output": "[0]",
            "question_reformulation": "Consider a situation where an extra charge of 14.75 units is imposed for each item beyond the one with index 1. How would you alter the objective function to accommodate this?"
        },
        {
            "id": "1.2.6.2.3",
            "question_variation": "Imagine a scenario where a penalty of 14.75 units is applied for each additional item after the item with the index 1. How would you modify the objective function to account for this?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 14.75 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 14.75 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)",
            "solver_output": "[0]",
            "question_reformulation": "Consider a situation where there is an imposed penalty of 14.75 units for each subsequent item following the item with the 1 index. How would you alter the objective function to reflect this change?"
        },
        {
            "id": "1.2.6.3.1",
            "question_variation": "Imagine a scenario where a penalty of 7.05 units is applied for each additional item after the item with the index 1. How would you modify the objective function to account for this?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.05 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.05 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would you adjust the objective function to accommodate a situation in which a 7.05 unit penalty is enforced for every item exceeding the one with index 1?"
        },
        {
            "id": "1.2.6.3.2",
            "question_variation": "Imagine a scenario where a penalty of 7.05 units is applied for each additional item after the item with the index 1. How would you modify the objective function to account for this?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.05 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.05 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would you adjust the objective function to accommodate a situation where a penalty of 7.05 units is imposed for each item beyond the one with index 1?"
        },
        {
            "id": "1.2.6.3.3",
            "question_variation": "Imagine a scenario where a penalty of 7.05 units is applied for each additional item after the item with the index 1. How would you modify the objective function to account for this?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.05 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.setObjective(sum(values[i] * x[i] for i in range(n)) - 7.05 * sum(x[i] for i in range(2, n)), GRB.MAXIMIZE)",
            "solver_output": "[0, 3]",
            "question_reformulation": "Consider a situation where a charge of 7.05 units is imposed for each item beyond the one with the index 1. How would you adjust the objective function to reflect this?"
        },
        {
            "id": "1.2.7.1.1",
            "question_variation": "How does the model change if we introduce a lower bound constraint such that at least 1 items must be selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Minimum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) >= 1, \"min_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) >= 1)",
            "solver_output": "[0, 3]",
            "question_reformulation": "What alterations occur in the model if we implement a lower limit restriction that requires the selection of a minimum of 1 item?"
        },
        {
            "id": "1.2.7.1.2",
            "question_variation": "How does the model change if we introduce a lower bound constraint such that at least 1 items must be selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Minimum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) >= 1, \"min_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) >= 1)",
            "solver_output": "[0, 3]",
            "question_reformulation": "What happens to the model when we apply a lower limit constraint that requires a minimum of 1 item to be selected?"
        },
        {
            "id": "1.2.7.1.3",
            "question_variation": "How does the model change if we introduce a lower bound constraint such that at least 1 items must be selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Minimum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) >= 1, \"min_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) >= 1)",
            "solver_output": "[0, 3]",
            "question_reformulation": "What alterations occur in the model when we implement a lower limit restriction that mandates the selection of a minimum of 1 item?"
        },
        {
            "id": "1.2.7.2.1",
            "question_variation": "How does the model change if we introduce a lower bound constraint such that at least 1 items must be selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Minimum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) >= 1, \"min_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) >= 1)",
            "solver_output": "[0, 3]",
            "question_reformulation": "What alterations occur in the model when we implement a lower limit constraint which mandates the selection of at least 1 item?"
        },
        {
            "id": "1.2.7.2.2",
            "question_variation": "How does the model change if we introduce a lower bound constraint such that at least 1 items must be selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Minimum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) >= 1, \"min_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) >= 1)",
            "solver_output": "[0, 3]",
            "question_reformulation": "What happens to the model when we implement a lower limit constraint that requires the selection of a minimum of 1 item?"
        },
        {
            "id": "1.2.7.2.3",
            "question_variation": "How does the model change if we introduce a lower bound constraint such that at least 1 items must be selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Minimum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) >= 1, \"min_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) >= 1)",
            "solver_output": "[0, 3]",
            "question_reformulation": "What happens to the model if we implement a minimum limit constraint that requires the selection of at least 1 item?"
        },
        {
            "id": "1.2.7.3.1",
            "question_variation": "How does the model change if we introduce a lower bound constraint such that at least 1 items must be selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Minimum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) >= 1, \"min_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) >= 1)",
            "solver_output": "[0, 3]",
            "question_reformulation": "What alterations occur in the model if we impose a minimum limit constraint that necessitates the selection of at least 1 item?"
        },
        {
            "id": "1.2.7.3.2",
            "question_variation": "How does the model change if we introduce a lower bound constraint such that at least 1 items must be selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Minimum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) >= 1, \"min_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) >= 1)",
            "solver_output": "[0, 3]",
            "question_reformulation": "What alterations occur in the model when we apply a lower limit constraint requiring a minimum selection of 1 item?"
        },
        {
            "id": "1.2.7.3.3",
            "question_variation": "How does the model change if we introduce a lower bound constraint such that at least 1 items must be selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Minimum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) >= 1, \"min_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) >= 1)",
            "solver_output": "[0, 3]",
            "question_reformulation": "What alteration occurs to the model when a lower limit constraint is added, requiring at least 1 item to be chosen?"
        },
        {
            "id": "1.2.8.1.1",
            "question_variation": "Given that the item with the index 2 is mandatory in the knapsack, how would the remaining items be optimally selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Mandatory item constraint\n    m.addConstr(x[2] == 1, \"mandatory_item_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[2] == 1",
            "solver_output": "[2, 3]",
            "question_reformulation": "Assuming the item at index 2 is compulsory in the knapsack, what is the optimal selection for the rest of the items?"
        },
        {
            "id": "1.2.8.1.2",
            "question_variation": "Given that the item with the index 2 is mandatory in the knapsack, how would the remaining items be optimally selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Mandatory item constraint\n    m.addConstr(x[2] == 1, \"mandatory_item_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[2] == 1",
            "solver_output": "[2, 3]",
            "question_reformulation": "Assuming that the object at index 2 is required in the backpack, how should the rest of the items be chosen for optimal selection?"
        },
        {
            "id": "1.2.8.1.3",
            "question_variation": "Given that the item with the index 2 is mandatory in the knapsack, how would the remaining items be optimally selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Mandatory item constraint\n    m.addConstr(x[2] == 1, \"mandatory_item_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[2] == 1",
            "solver_output": "[2, 3]",
            "question_reformulation": "Assuming that the item at index 2 is required in the knapsack, how would you optimally choose the rest of the items?"
        },
        {
            "id": "1.2.8.2.1",
            "question_variation": "Given that the item with the index 3 is mandatory in the knapsack, how would the remaining items be optimally selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Mandatory item constraint\n    m.addConstr(x[3] == 1, \"mandatory_item_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[3] == 1",
            "solver_output": "[0, 3]",
            "question_reformulation": "Assuming that the item at index 3 is obligatory in the knapsack, how would you optimally choose the rest of the items?"
        },
        {
            "id": "1.2.8.2.2",
            "question_variation": "Given that the item with the index 3 is mandatory in the knapsack, how would the remaining items be optimally selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Mandatory item constraint\n    m.addConstr(x[3] == 1, \"mandatory_item_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[3] == 1",
            "solver_output": "[0, 3]",
            "question_reformulation": "Assuming that the item at index 3 is compulsory in the knapsack, how should the other items be chosen for optimal selection?"
        },
        {
            "id": "1.2.8.2.3",
            "question_variation": "Given that the item with the index 3 is mandatory in the knapsack, how would the remaining items be optimally selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Mandatory item constraint\n    m.addConstr(x[3] == 1, \"mandatory_item_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[3] == 1",
            "solver_output": "[0, 3]",
            "question_reformulation": "Assuming the object at index 3 is compulsory in the knapsack, how would you optimally choose the rest of the items?"
        },
        {
            "id": "1.2.8.3.1",
            "question_variation": "Given that the item with the index 0 is mandatory in the knapsack, how would the remaining items be optimally selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Mandatory item constraint\n    m.addConstr(x[0] == 1, \"mandatory_item_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[0] == 1",
            "solver_output": "[0, 3]",
            "question_reformulation": "Assuming the item at index 0 is compulsory in the knapsack, what would be the optimal selection of the rest of the items?"
        },
        {
            "id": "1.2.8.3.2",
            "question_variation": "Given that the item with the index 0 is mandatory in the knapsack, how would the remaining items be optimally selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Mandatory item constraint\n    m.addConstr(x[0] == 1, \"mandatory_item_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[0] == 1",
            "solver_output": "[0, 3]",
            "question_reformulation": "Assuming the item at index 0 is compulsory in the knapsack, what would be the optimal choice of the remaining items?"
        },
        {
            "id": "1.2.8.3.3",
            "question_variation": "Given that the item with the index 0 is mandatory in the knapsack, how would the remaining items be optimally selected?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Mandatory item constraint\n    m.addConstr(x[0] == 1, \"mandatory_item_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[0] == 1",
            "solver_output": "[0, 3]",
            "question_reformulation": "Considering that the item at index 0 is required in the knapsack, how would you optimally choose the rest of the items?"
        },
        {
            "id": "1.2.9.1.1",
            "question_variation": "If you were to restrict the number of items in the knapsack to a maximum of 3, how would that influence the solution?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Maximum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) <= 3, \"max_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) <= 3)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would limiting the quantity of items in the knapsack to no more than 3 affect the solution?"
        },
        {
            "id": "1.2.9.1.2",
            "question_variation": "If you were to restrict the number of items in the knapsack to a maximum of 3, how would that influence the solution?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Maximum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) <= 3, \"max_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) <= 3)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would limiting the number of items in the knapsack to a maximum of 3 affect the solution?"
        },
        {
            "id": "1.2.9.1.3",
            "question_variation": "If you were to restrict the number of items in the knapsack to a maximum of 3, how would that influence the solution?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Maximum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) <= 3, \"max_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) <= 3)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would the solution be affected if the knapsack's item limit was capped at a maximum of 3?"
        },
        {
            "id": "1.2.9.2.1",
            "question_variation": "If you were to restrict the number of items in the knapsack to a maximum of 3, how would that influence the solution?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Maximum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) <= 3, \"max_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) <= 3)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would limiting the number of items in the knapsack to a maximum of 3 affect the outcome?"
        },
        {
            "id": "1.2.9.2.2",
            "question_variation": "If you were to restrict the number of items in the knapsack to a maximum of 3, how would that influence the solution?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Maximum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) <= 3, \"max_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) <= 3)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would limiting the knapsack's item capacity to a maximum of 3 affect the solution?"
        },
        {
            "id": "1.2.9.2.3",
            "question_variation": "If you were to restrict the number of items in the knapsack to a maximum of 3, how would that influence the solution?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Maximum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) <= 3, \"max_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) <= 3)",
            "solver_output": "[0, 3]",
            "question_reformulation": "What impact would limiting the number of items in the knapsack to a maximum of 3 have on the solution?"
        },
        {
            "id": "1.2.9.3.1",
            "question_variation": "If you were to restrict the number of items in the knapsack to a maximum of 2, how would that influence the solution?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Maximum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) <= 2, \"max_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) <= 2)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would the solution be affected if the knapsack's item limit was set to a maximum of 2?"
        },
        {
            "id": "1.2.9.3.2",
            "question_variation": "If you were to restrict the number of items in the knapsack to a maximum of 2, how would that influence the solution?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Maximum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) <= 2, \"max_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) <= 2)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would limiting the quantity of items in the knapsack to no more than 2 impact the solution?"
        },
        {
            "id": "1.2.9.3.3",
            "question_variation": "If you were to restrict the number of items in the knapsack to a maximum of 2, how would that influence the solution?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Maximum items constraint\n    m.addConstr(sum(x[i] for i in range(n)) <= 2, \"max_items_constraint\")\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(sum(x[i] for i in range(n)) <= 2)",
            "solver_output": "[0, 3]",
            "question_reformulation": "How would the solution be affected if you limit the quantity of items in the knapsack to a maximum of 2?"
        },
        {
            "id": "1.2.10.1.1",
            "question_variation": "If there's a requirement that either item with index 0 or item with index 3 must be included in the knapsack but not both, how would you adjust the model to ensure this condition is met?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Either or constraint\n    m.addConstr(x[0] + x[3] == 1)\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[0] + x[3] == 1)",
            "solver_output": "[2, 3]",
            "question_reformulation": "How would you modify the model to guarantee that either the item at index 0 or the item at index 3 is included in the knapsack, but not both, if such a condition is necessary?"
        },
        {
            "id": "1.2.10.1.2",
            "question_variation": "If there's a requirement that either item with index 0 or item with index 3 must be included in the knapsack but not both, how would you adjust the model to ensure this condition is met?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Either or constraint\n    m.addConstr(x[0] + x[3] == 1)\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[0] + x[3] == 1)",
            "solver_output": "[2, 3]",
            "question_reformulation": "How would you modify the model to satisfy the condition that necessitates the inclusion of either the item at index 0 or the item at index 3 in the knapsack, but not both?"
        },
        {
            "id": "1.2.10.1.3",
            "question_variation": "If there's a requirement that either item with index 0 or item with index 3 must be included in the knapsack but not both, how would you adjust the model to ensure this condition is met?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Either or constraint\n    m.addConstr(x[0] + x[3] == 1)\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[0] + x[3] == 1)",
            "solver_output": "[2, 3]",
            "question_reformulation": "How would you modify the model to fulfill the condition that only one item - either the one at index 0 or the one at index 3 - is required to be in the knapsack, but not both?"
        },
        {
            "id": "1.2.10.2.1",
            "question_variation": "If there's a requirement that either item with index 1 or item with index 2 must be included in the knapsack but not both, how would you adjust the model to ensure this condition is met?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Either or constraint\n    m.addConstr(x[1] + x[2] == 1)\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[1] + x[2] == 1)",
            "solver_output": "[2, 3]",
            "question_reformulation": "How would you modify the model to satisfy the condition that either the item at index 1 or the item at index 2 must be included in the knapsack, but not both, if such a requirement exists?"
        },
        {
            "id": "1.2.10.2.2",
            "question_variation": "If there's a requirement that either item with index 1 or item with index 2 must be included in the knapsack but not both, how would you adjust the model to ensure this condition is met?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Either or constraint\n    m.addConstr(x[1] + x[2] == 1)\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[1] + x[2] == 1)",
            "solver_output": "[2, 3]",
            "question_reformulation": "How would you modify the model to fulfill the condition that necessitates the inclusion of either the item at index 1 or the item at index 2 in the knapsack, but not both?"
        },
        {
            "id": "1.2.10.2.3",
            "question_variation": "If there's a requirement that either item with index 1 or item with index 2 must be included in the knapsack but not both, how would you adjust the model to ensure this condition is met?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Either or constraint\n    m.addConstr(x[1] + x[2] == 1)\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[1] + x[2] == 1)",
            "solver_output": "[2, 3]",
            "question_reformulation": "How would you modify the model to satisfy the condition that the knapsack must include either the item at index 1 or the item at index 2, but not both?"
        },
        {
            "id": "1.2.10.3.1",
            "question_variation": "If there's a requirement that either item with index 2 or item with index 1 must be included in the knapsack but not both, how would you adjust the model to ensure this condition is met?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Either or constraint\n    m.addConstr(x[2] + x[1] == 1)\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[2] + x[1] == 1)",
            "solver_output": "[2, 3]",
            "question_reformulation": "How would you modify the model to guarantee that the knapsack must contain either the item at index 2 or the item at index 1, but not both, if this is a necessary condition?"
        },
        {
            "id": "1.2.10.3.2",
            "question_variation": "If there's a requirement that either item with index 2 or item with index 1 must be included in the knapsack but not both, how would you adjust the model to ensure this condition is met?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Either or constraint\n    m.addConstr(x[2] + x[1] == 1)\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[2] + x[1] == 1)",
            "solver_output": "[2, 3]",
            "question_reformulation": "How would you modify the model to satisfy the condition that either the item at index 2 or the item at index 1 must be included in the knapsack, but not both?"
        },
        {
            "id": "1.2.10.3.3",
            "question_variation": "If there's a requirement that either item with index 2 or item with index 1 must be included in the knapsack but not both, how would you adjust the model to ensure this condition is met?",
            "answer_variation": "from gurobipy import Model, GRB\n\n\ndef knapsack_gurobi(values, weights, W):\n    # Number of items\n    n = len(values)\n\n    # Create a new Gurobi model\n    m = Model(\"knapsack_transform\")\n\n    # Decision variables\n    x = m.addVars(n, vtype=GRB.BINARY, name=\"x\")\n\n    # Objective function\n    m.setObjective(sum(values[i] * x[i] for i in range(n)), GRB.MAXIMIZE)\n\n    # Weight constraint\n    m.addConstr(sum(weights[i] * x[i] for i in range(n)) <= W, \"weight_constraint\")\n\n    # Either or constraint\n    m.addConstr(x[2] + x[1] == 1)\n\n    # Solve the model\n    m.optimize()\n\n    # Extract the solution\n    selected_items = [i for i in range(n) if x[i].X > 0.5]\n\n    return selected_items\n\n\n# Data\nvalues = [33, 22, 30, 10]\nweights = [5, 6, 8, 2]\nW = 10\nselected_items = knapsack_gurobi(values, weights, W)\nprint(selected_items)\n            ",
            "answer_section": "m.addConstr(x[2] + x[1] == 1)",
            "solver_output": "[2, 3]",
            "question_reformulation": "How would you modify the model to satisfy the condition that necessitates the inclusion of either the item at index 2 or the item at index 1 in the knapsack, but not both?"
        }
    ]
}